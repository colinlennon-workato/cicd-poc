# This is a basic workflow to help you get started with Actions

name: initialise_repo

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        deployment_mode:
          description: 'Deployment Mode'
          required: true
          default: 'Projects'
          type: choice
          options:
          - RLCM
          - Projects
        asset_name:
          description: 'Manifest or Project Name'
          required: true
          type: string
        

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Download project/manifest and add to repositoy
        run: |
          # Get project ID
          PROJECT_ID=$(curl --location 'https://app.eu.workato.com/api/projects' \
          --header 'Authorization: Bearer ${{ secrets.WORKATO_TOKEN }}' \
          | jq --arg ASSET_NAME "$ASSET_NAME" '.[] | select(.name==$ASSET_NAME).id')          
          echo "Project ID: $PROJECT_ID"
          
          # Build project and get build ID
          BUILD_ID=$(curl --request POST --location "https://app.eu.workato.com/api/projects/$PROJECT_ID/build" \
          --header 'Authorization: Bearer ${{ secrets.WORKATO_TOKEN }}' \
          -d '{"description": "GitHub Actions PoC", "include_tags": true}' | jq '.id')
          echo "Build ID: $BUILD_ID"

          # Wait for build to complete
          sleep 10
          
          # Get download URL
          download_url=$(curl --location "https://app.eu.workato.com/api/project_builds/$BUILD_ID" \
          --header 'Authorization: Bearer ${{ secrets.WORKATO_TOKEN }}' | jq -r '.download_url')
          echo "Download URL: $download_url"
          curl -L $download_url > "asset.zip"
          
          mkdir temp
          mv asset.zip temp/asset.zip
          cd temp
          unzip asset.zip
          rm *.zip
          echo "temp ls"
          ls -ltr
          cd "$ASSET_NAME"
          echo "$ASSET_NAME ls"
          ls -ltr
          cd ../..
          EPOCH=$(date +"%s")
          mkdir $EPOCH
          mv -v temp/"$ASSET_NAME"/* ./$EPOCH/
          rm -r temp
          ls -ltr
          git config --local user.email "github-actions@users.noreply.github.com"
          git config --local user.name "github-actions"
          git add .
          git commit -m "unzip"
          git push origin main
        env:
          ASSET_NAME: ${{ inputs.asset_name }}
          
          
          

